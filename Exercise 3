package com.example.activitylifecycle

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Share
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.activitylifecycle.ui.theme.ActivityLifecycleTheme

private const val TAG = "MainActivity"


// âœ… Dessert data
data class Dessert(val imageResId: Int, val price: Int, val startProductionAmount: Int)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d(TAG, "onCreate called")
        setContent {
            ActivityLifecycleTheme {
                DessertClickerScreen(this)
            }
        }
    }

    override fun onStart() { super.onStart(); Log.d(TAG, "onStart called") }
    override fun onResume() { super.onResume(); Log.d(TAG, "onResume called") }
    override fun onPause() { super.onPause(); Log.d(TAG, "onPause called") }
    override fun onStop() { super.onStop(); Log.d(TAG, "onStop called") }
    override fun onDestroy() { super.onDestroy(); Log.d(TAG, "onDestroy called") }
    override fun onRestart() { super.onRestart(); Log.d(TAG, "onRestart called") }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DessertClickerScreen(context: Context) {
    val desserts = listOf(
        Dessert(R.drawable.cupcake, 5, 0),
        Dessert(R.drawable.donut, 10, 5),
        Dessert(R.drawable.eclair, 15, 10),
        Dessert(R.drawable.froyo, 20, 15)
    )

    var dessertsSold by rememberSaveable { mutableStateOf(0) }
    var revenue by rememberSaveable { mutableStateOf(0) }

    val currentDessert = desserts.last { it.startProductionAmount <= dessertsSold }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Dessert Clicker") },
                actions = {
                    IconButton(onClick = {
                        shareDessertsInfo(context, dessertsSold, revenue)
                    }) {
                        Icon(
                            imageVector = Icons.Default.Share,
                            contentDescription = "Share"
                        )
                    }
                }
            )
        }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // Background
            Image(
                painter = painterResource(id = R.drawable.brick_bg),
                contentDescription = null,
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )


            // ðŸ”¹ Layer 1: Table + Plate + Dessert
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.BottomCenter
            ) {
                // Table (mas malaki)
                Image(
                    painter = painterResource(id = R.drawable.table),
                    contentDescription = "Table",
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(260.dp) // mas mataas para dominant
                        .align(Alignment.BottomCenter)
                )

                // Plate (proportionate, mas maliit kaysa table)
                Image(
                    painter = painterResource(id = R.drawable.plate),
                    contentDescription = "Plate",
                    modifier = Modifier
                        .size(200.dp)
                        .align(Alignment.BottomCenter)
                        .offset(y = (-140).dp)
                )

                // Dessert (sakto sa plate)
                Image(
                    painter = painterResource(id = currentDessert.imageResId),
                    contentDescription = "Dessert",
                    modifier = Modifier
                        .size(140.dp)
                        .align(Alignment.BottomCenter)
                        .offset(y = (-210).dp)
                        .clickable {
                            dessertsSold++
                            revenue += currentDessert.price
                        }
                )
            }


            // ðŸ”¹ Layer 2: UI content (Today's Special + Stats Card)
            Column(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = Arrangement.SpaceBetween,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(12.dp)) // mas maliit spacing

                // "Today's Special" (tinaas pa)
                Card(
                    modifier = Modifier
                        .padding(bottom = 12.dp)
                        .fillMaxWidth(0.75f),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Today's Special",
                            style = MaterialTheme.typography.bodyLarge.copy(fontSize = 26.sp)
                        )
                    }
                }

                // ðŸ“Š Stats card (lagi visible, hindi natatakpan ng table)
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 32.dp, vertical = 24.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                    shape = RoundedCornerShape(16.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    )
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Desserts Sold: $dessertsSold",
                            style = MaterialTheme.typography.bodyLarge.copy(fontSize = 18.sp)
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Total Revenue: $$revenue",
                            style = MaterialTheme.typography.bodyLarge.copy(fontSize = 18.sp)
                        )
                    }
                }
            }
        }
    }
}




// âœ… Share function outside composable
fun shareDessertsInfo(context: Context, dessertsSold: Int, revenue: Int) {
    val shareText = "I've sold $dessertsSold desserts and earned $$revenue in Dessert Clicker!"
    val intent = Intent(Intent.ACTION_SEND).apply {
        type = "text/plain"
        putExtra(Intent.EXTRA_TEXT, shareText)
    }
    context.startActivity(Intent.createChooser(intent, "Share via"))
}
